// Generated by gencpp from file planning/PathReference.msg
// DO NOT EDIT!


#ifndef PLANNING_MESSAGE_PATHREFERENCE_H
#define PLANNING_MESSAGE_PATHREFERENCE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <planning/PathReferenceElement.h>

namespace planning
{
template <class ContainerAllocator>
struct PathReference_
{
  typedef PathReference_<ContainerAllocator> Type;

  PathReference_()
    : path()  {
    }
  PathReference_(const ContainerAllocator& _alloc)
    : path(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::planning::PathReferenceElement_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::planning::PathReferenceElement_<ContainerAllocator> >> _path_type;
  _path_type path;





  typedef boost::shared_ptr< ::planning::PathReference_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::planning::PathReference_<ContainerAllocator> const> ConstPtr;

}; // struct PathReference_

typedef ::planning::PathReference_<std::allocator<void> > PathReference;

typedef boost::shared_ptr< ::planning::PathReference > PathReferencePtr;
typedef boost::shared_ptr< ::planning::PathReference const> PathReferenceConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::planning::PathReference_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::planning::PathReference_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::planning::PathReference_<ContainerAllocator1> & lhs, const ::planning::PathReference_<ContainerAllocator2> & rhs)
{
  return lhs.path == rhs.path;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::planning::PathReference_<ContainerAllocator1> & lhs, const ::planning::PathReference_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace planning

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::planning::PathReference_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::planning::PathReference_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::planning::PathReference_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::planning::PathReference_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::planning::PathReference_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::planning::PathReference_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::planning::PathReference_<ContainerAllocator> >
{
  static const char* value()
  {
    return "373808cfe5239db879670ef6db7c7750";
  }

  static const char* value(const ::planning::PathReference_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x373808cfe5239db8ULL;
  static const uint64_t static_value2 = 0x79670ef6db7c7750ULL;
};

template<class ContainerAllocator>
struct DataType< ::planning::PathReference_<ContainerAllocator> >
{
  static const char* value()
  {
    return "planning/PathReference";
  }

  static const char* value(const ::planning::PathReference_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::planning::PathReference_<ContainerAllocator> >
{
  static const char* value()
  {
    return "PathReferenceElement[] path\n"
"================================================================================\n"
"MSG: planning/PathReferenceElement\n"
"geometry_msgs/Pose pose\n"
"uint8 mode\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::planning::PathReference_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::planning::PathReference_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.path);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PathReference_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::planning::PathReference_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::planning::PathReference_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "path: ";
    if (v.path.empty() || false)
      s << "[";
    for (size_t i = 0; i < v.path.size(); ++i)
    {
      if (false && i > 0)
        s << ", ";
      else if (!false)
        s << std::endl << indent << "  -";
      Printer< ::planning::PathReferenceElement_<ContainerAllocator> >::stream(s, false ? std::string() : indent + "    ", v.path[i]);
    }
    if (v.path.empty() || false)
      s << "]";
  }
};

} // namespace message_operations
} // namespace ros

#endif // PLANNING_MESSAGE_PATHREFERENCE_H
